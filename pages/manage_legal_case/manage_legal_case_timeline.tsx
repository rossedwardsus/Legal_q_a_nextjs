import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../../styles/Home.module.css'
import { Textarea, Checkbox, CheckboxGroup, Stack } from '@chakra-ui/react'
import { Button, ButtonGroup, Select, Input } from '@chakra-ui/react'
import ResizeTextarea from "react-textarea-autosize";
import { useRef, useState, useEffect } from 'react';

import bodyParser from "body-parser";
import util from "util";
import axios from "axios";


const { MongoClient } = require("mongodb");

const getBody = util.promisify(bodyParser.urlencoded());


const ManageLegalCaseTimeline: NextPage = (props: any) => {

  const eventRef = useRef();
  const dtref = useRef();

  const [timelineEventDate, setTimelineEventDate] = useState<any>(""); 
  const [timelineEventTime, setTimelineEventTime] = useState<any>(""); 
  const [timeline, setTimeline] = useState<any>([{datetime: "", event: ""}]); 
  const [plannedDate, setPlannedDate] = useState();

  const addEvent = () => {

      var timelineTemp = [...timeline];

      setTimeline({});

  }

  const onchangeevent = (e: any) => {

      console.log(e.target.value);

      //setPlannedDate(e.target.value);

      //if(e.target.value != ""){
      //  alert(e.target.value);
      //}

  }

  //useEffect(() => {
  //  console.log(plannedDate);
  //}, [plannedDate])

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        Manage my case Timeline
        <br/>
        <br/>
        <form action="/manage_legal_case/manage_legal_case_timeline" method="post">
            <br/>
            Date time of event
            <br/>
            <Input onChange={onchangeevent} name="event_date" type="datetime-local"></Input> <Input name="event_time" type="time"></Input>
            <br/>
            Event
            <br/>
            <Textarea
              minH="unset"
              overflow="hidden"
              w="100%"
              resize="none"
              ref={eventRef}
              minRows={1}
              as={ResizeTextarea}
              {...props}
              name="event"
            />
            <br/>
            <br/>
            <Button type="submit">Add Event</Button>
        </form>
        <br/>
        <br/>
        August 5, 2022 11:50 am
        <br/>
        Event
        <br/>
        <br/>
        August 5, 2022 11:55 am
        <br/>
        Event
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export const getServerSideProps = async ({ req, res }: any) => {

  //const router = useRouter(); 

  await getBody(req, res);
  console.log("event_date" + JSON.stringify(req.body["event_date"]));
  console.log("event_time" + JSON.stringify(req.body["event_time"]));
  console.log("event" + JSON.stringify(req.body["event"]));
  //console.log("question1" + JSON.stringify(req.body["question1"]));
  //console.log("question2" + JSON.stringify(req.body["question2"]));
  //date of incident
  console.log("state" + JSON.stringify(req.body));

  const uri = "mongodb://localhost:27017?retryWrites=true&writeConcern=majority";
  const client = new MongoClient(uri);

  try {
    const database = client.db('test_databasex');
    const movies = database.collection('test_collection');
    // Query for a movie that has the title 'Back to the Future'
    const insert = { event_datetime: "ed", event: "Record of a Shriveled Datum-timeline" };
    const movie = await movies.insertOne(insert);
    console.log(movie);
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }


  //router.push("/homepage");

  //return {
  //  redirect: {
  //    permanent: false,
  //    destination: `/homepage`
  //  },
  //};

  //check db for email and password
  //if error then redirect bac
  //else go to homepage
  //router.push("/homepage");

  /*try {
    const response = await axios.get(
      `https://api.example.com/getHomeSection?title=Section 1`
    );
    
    return {
      props: {
        show: response.data,
      },
    };
  } catch (error) {
    return {
      props: {
        error: error.error,
      },
    };
  }*/

  return {props: {}};

};


export default ManageLegalCaseTimeline
