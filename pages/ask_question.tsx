import type { NextPage } from 'next'
import { Textarea, Checkbox, CheckboxGroup, Stack } from '@chakra-ui/react'
import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'
import styles from '../styles/Home.module.css'
import { useState, forwardRef, useRef } from 'react'
import ResizeTextarea from "react-textarea-autosize";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button, ButtonGroup, Select, Input } from '@chakra-ui/react'

import bodyParser from "body-parser";
import util from "util";
import axios from "axios";

const { MongoClient } = require("mongodb");
import clientPromise  from '../lib/db';


const getBody = util.promisify(bodyParser.urlencoded());



const FormSchema = z.object({
  email: z.string().email(),
  //accept: z.literal(true, {
  //  invalid_type_error: "You must accept Terms and Conditions.",
  //}),
  //tier: z
  //  .string({ invalid_type_error: "Please select a payment tier." })
  //  .refine((val) => Tiers.map((tier) => tier.id).includes(val)),
});

const AutoResizeTextarea = forwardRef<HTMLInputElement, any>((props, ref) => {
  return (
    <Textarea
      minH="unset"
      overflow="hidden"
      w="100%"
      resize="none"
      ref={ref}
      minRows={1}
      as={ResizeTextarea}
      {...props}
      name="question2"
    />
  );
});

const AskQuestion: NextPage = (props: any, ref: any) => {
  const router = useRouter();
  const [checkedItems, setCheckedItems] = useState([false, false])
  const allChecked = checkedItems.every(Boolean)
  const isIndeterminate = checkedItems.some(Boolean) && !allChecked
  const [questionTitle, setQuestionTitle] = useState();
  const [value, setValue] = useState('')
  const questionRef = useRef();
  const questionRef1 = useRef();
  
  const { register, handleSubmit, watch, formState: { errors } } = useForm({
    //resolver: zodResolver(FormSchema),
  });

  const handleChange = (event: any) => setValue(event.target.value)

  const submitQuestion = () => {

      //post to axios then redirect somewhere

  } 

  return (
      <>
        <div className={styles.container}>
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <main className={styles.main}>
            <form action="/ask_question" method="post">
              title<input name="title"/>
              <br/>
              <Input placeholder='Basic usage' />
              <br/>
              <Input
                value={value}
                onChange={handleChange}
                placeholder='Here is a sample placeholder'
                size='sm'
                name="title"
              />
              <br/>
              add tag
              <br/>
              caterogy-car accident/estate law/startup law/real estate law
              <br/>
              <CheckboxGroup colorScheme='green' defaultValue={['naruto', 'kakashi']}>
                <Stack spacing={[1, 5]} direction={['column', 'row']}>
                  <Checkbox value='naruto' name="tags[]">Naruto</Checkbox>
                  <Checkbox value='sasuke' name="tags[]">Sasuke</Checkbox>
                  <Checkbox value='kakashi' name="tags[]">Kakashi</Checkbox>
                </Stack>
              </CheckboxGroup>
              <br/>
              <Select name="category">
                <option value="">Car Accident</option>
                <option value="">Estate Law</option>
                <option value="">Startup Law</option>
              </Select>
              <br/>
              state legal question relates to
              <br/>
              <Select name="state">
                <option value="">CA</option>
                <option value="">TX</option>
                <option value="">NY</option>
              </Select>
              <br/>
              question-(dont include names)
              <br/>
              <br/>
              <Textarea name="question" rows={20} cols={50}>2</Textarea>
              <br/>
              <Textarea
                minH="unset"
                overflow="hidden"
                w="100%"
                resize="none"
                ref={questionRef}
                minRows={1}
                as={ResizeTextarea}
                {...props}
                name="question1"
              />
              <AutoResizeTextarea inputref={questionRef1}/>
              <br/>
              add images-blur license plates and people
              <br/>
              <br/>
              <Button type="submit">Submit question</Button>
            </form>
          </main>

          <footer className={styles.footer}>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              Powered by{' '}
              <span className={styles.logo}>
                <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
              </span>
            </a>
          </footer>
        </div>
      </>
  )
}

export const getServerSideProps = async ({ req, res }: any) => {

    //const router = useRouter(); 

    await getBody(req, res);
    console.log("title" + JSON.stringify(req.body["title"]));
    console.log("tags" + JSON.stringify(req.body["tags"]));
    console.log("question" + JSON.stringify(req.body["question"]));
    console.log("question1" + JSON.stringify(req.body["question1"]));
    console.log("question2" + JSON.stringify(req.body["question2"]));
    //date of incident
    console.log("state" + JSON.stringify(req.body["state"]));

    const uri = "mongodb://localhost:27017?retryWrites=true&writeConcern=majority";
    const client = new MongoClient(uri);

    try {
      const database = client.db('test_databasex');
      //const movies = database.collection('test_collection');

      const cp = await clientPromise;
      const db = await cp.db('test_databasex');
      const movies_collection = await db.collection("test_collection");
      // Query for a movie that has the title 'Back to the Future'
      const insert = { datetime: "", event: "Record of a Shriveled Datum11111from lib" };
      const inserted_movie = movies_collection.insertOne(insert);
      console.log(inserted_movie);
      //return inserted_movie;
    } finally {
      // Ensures that the client will close when you finish/error
      //await client.close();
    }

    //router.push("/homepage");

    //return {
    //  redirect: {
    //    permanent: false,
    //    destination: `/homepage`
    //  },
    //};

    //check db for email and password
    //if error then redirect bac
    //else go to homepage
    //router.push("/homepage");

    /*try {
      const response = await axios.get(
        `https://api.example.com/getHomeSection?title=Section 1`
      );
      
      return {
        props: {
          show: response.data,
        },
      };
    } catch (error) {
      return {
        props: {
          error: error.error,
        },
      };
    }*/

    return {props: {}};

};


export default AskQuestion
